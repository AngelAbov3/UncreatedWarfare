// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Uncreated.Warfare.Database;

namespace Uncreated.Warfare.Migrations
{
    [DbContext(typeof(WarfareDbContext))]
    [Migration("20231201020022_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.Faction", b =>
                {
                    b.Property<uint>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8);

                    b.Property<string>("Emoji")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("FlagImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("HexColor")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnName("Id")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(24) CHARACTER SET utf8mb4")
                        .HasMaxLength(24);

                    b.Property<int?>("SpriteIndex")
                        .HasColumnType("int");

                    b.Property<string>("UnarmedKit")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("Key");

                    b.ToTable("factions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionAsset", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Asset")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<uint>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Redirect")
                        .IsRequired()
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator')");

                    b.Property<string>("VariantKey")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.ToTable("faction_assets");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionLocalization", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(8) CHARACTER SET utf8mb4")
                        .HasMaxLength(8);

                    b.Property<uint>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(24) CHARACTER SET utf8mb4")
                        .HasMaxLength(24);

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("LanguageId");

                    b.ToTable("faction_translations");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.GameRecord", b =>
                {
                    b.Property<ulong>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("Map")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime");

                    b.Property<uint?>("WinnerFactionId")
                        .HasColumnName("Winner")
                        .HasColumnType("int unsigned");

                    b.HasKey("GameId");

                    b.HasIndex("WinnerFactionId");

                    b.ToTable("stats_games");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.SessionRecord", b =>
                {
                    b.Property<ulong>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime?>("EndedTimestamp")
                        .HasColumnName("EndedTimestampUTC")
                        .HasColumnType("datetime");

                    b.Property<uint?>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("FinishedGame")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong>("GameId")
                        .HasColumnName("Game")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint?>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<double>("LengthSeconds")
                        .HasColumnType("double");

                    b.Property<int>("MapId")
                        .HasColumnName("Map")
                        .HasColumnType("int");

                    b.Property<ulong?>("NextSessionId")
                        .HasColumnName("NextSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PlayerDataSteam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("PreviousSessionId")
                        .HasColumnName("PreviousSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("SeasonId")
                        .HasColumnName("Season")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedTimestamp")
                        .HasColumnName("StartedTimestampUTC")
                        .HasColumnType("datetime");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("UnexpectedTermination")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SessionId");

                    b.HasIndex("FactionId");

                    b.HasIndex("GameId");

                    b.HasIndex("KitId");

                    b.HasIndex("MapId");

                    b.HasIndex("PlayerDataSteam64");

                    b.HasIndex("PreviousSessionId")
                        .IsUnique();

                    b.HasIndex("SeasonId");

                    b.HasIndex("Steam64");

                    b.ToTable("stats_sessions");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", b =>
                {
                    b.Property<uint>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<uint?>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.HasKey("PrimaryKey");

                    b.HasIndex("FactionId");

                    b.ToTable("kits_bundles");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.KitEliteBundle", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("BundleId")
                        .HasColumnName("Bundle")
                        .HasColumnType("int unsigned");

                    b.HasKey("KitId", "BundleId");

                    b.HasIndex("BundleId");

                    b.ToTable("kits_bundle_items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Kit", b =>
                {
                    b.Property<uint>("PrimaryKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("enum('Infantry','Armor','Airforce','SpecOps','Navy')");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("enum('Unarmed','Squadleader','Rifleman','Medic','Breacher','AutomaticRifleman','Grenadier','MachineGunner','LAT','HAT','Marksman','Sniper','APRifleman','CombatEngineer','Crewman','Pilot','SpecOps')");

                    b.Property<DateTime>("CreatedTimestamp")
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<ulong>("Creator")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("CreditCost")
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FactionFilterIsWhitelist")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint?>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasColumnName("Id")
                        .HasColumnType("varchar(25) CHARACTER SET utf8mb4")
                        .HasMaxLength(25);

                    b.Property<DateTime>("LastEditedTimestamp")
                        .HasColumnName("LastEditedAt")
                        .HasColumnType("datetime");

                    b.Property<ulong>("LastEditor")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("MapFilterIsWhitelist")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PremiumCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<float>("RequestCooldown")
                        .HasColumnType("float");

                    b.Property<bool>("RequiresNitro")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<string>("SquadLevel")
                        .IsRequired()
                        .HasColumnType("enum('Member','Commander')");

                    b.Property<float?>("TeamLimit")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('Public','Elite','Special','Loadout')");

                    b.Property<string>("WeaponText")
                        .HasColumnName("Weapons")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.HasKey("PrimaryKey");

                    b.HasIndex("FactionId");

                    b.ToTable("kits");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitAccess", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasColumnType("enum('Unknown','Credits','Event','Purchase','QuestReward')");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("GivenAt")
                        .HasColumnType("datetime");

                    b.HasKey("KitId", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_access");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFavorite", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("KitId", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_favorites");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredFaction", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("FactionId")
                        .HasColumnName("Faction")
                        .HasColumnType("int unsigned");

                    b.HasKey("KitId", "FactionId");

                    b.HasIndex("FactionId");

                    b.ToTable("kits_faction_filters");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredMap", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Map")
                        .HasColumnName("Map")
                        .HasColumnType("int unsigned");

                    b.HasKey("KitId", "Map");

                    b.ToTable("kits_map_filters");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitHotkey", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Item")
                        .HasColumnType("char(32)");

                    b.Property<string>("Page")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<string>("Redirect")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator')");

                    b.Property<byte>("X")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("Y")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("KitId", "Slot", "Steam64");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_hotkeys");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitItemModel", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<byte?>("Amount")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("ClothingSlot")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses')");

                    b.Property<string>("Item")
                        .HasColumnType("char(32)");

                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<byte[]>("Metadata")
                        .HasColumnType("varbinary(18)")
                        .HasMaxLength(18);

                    b.Property<string>("Page")
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<string>("Redirect")
                        .HasColumnType("enum('Shirt','Pants','Vest','Hat','Mask','Backpack','Glasses','AmmoSupply','BuildSupply','RallyPoint','Radio','AmmoBag','AmmoCrate','RepairStation','Bunker','EntrenchingTool','UAV','RepairStationBuilt','AmmoCrateBuilt','BunkerBuilt','Cache','RadioDamaged','LaserDesignator')");

                    b.Property<string>("RedirectVariant")
                        .HasColumnType("varchar(36) CHARACTER SET utf8mb4")
                        .HasMaxLength(36);

                    b.Property<byte?>("Rotation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("X")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte?>("Y")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_items");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitLayoutTransformation", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<string>("NewPage")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<byte>("NewRotation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("NewX")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("NewY")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("OldPage")
                        .IsRequired()
                        .HasColumnType("enum('Primary','Secondary','Hands','Backpack','Vest','Shirt','Pants','Storage','Area')");

                    b.Property<byte>("OldX")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("OldY")
                        .HasColumnType("tinyint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.HasIndex("Steam64");

                    b.ToTable("kits_layouts");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitSkillset", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<byte>("Level")
                        .HasColumnName("Level")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnName("Skill")
                        .HasColumnType("enum('OVERKILL','SHARPSHOOTER','DEXTERITY','CARDIO','EXERCISE','DIVING','PARKOUR','SNEAKYBEAKY','VITALITY','IMMUNITY','TOUGHNESS','STRENGTH','WARMBLOODED','SURVIVAL','HEALING','CRAFTING','OUTDOORS','COOKING','FISHING','AGRICULTURE','MECHANIC','ENGINEER')");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_skillsets");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitTranslation", b =>
                {
                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("KitId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("kits_sign_text");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitUnlockRequirement", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<uint>("KitId")
                        .HasColumnName("Kit")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("KitId");

                    b.ToTable("kits_unlock_requirements");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageAlias", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_aliases");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageContributor", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("Contributor")
                        .HasColumnName("Contributor")
                        .HasColumnType("bigint unsigned");

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("Contributor");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_credits");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageCulture", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("CultureCode")
                        .IsRequired()
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_cultures");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageInfo", b =>
                {
                    b.Property<uint>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pk")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.Property<string>("DefaultCultureCode")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<string>("FallbackTranslationLanguageCode")
                        .HasColumnType("char(5)");

                    b.Property<bool>("HasTranslationSupport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("NativeName")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<bool>("RequiresIMGUI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SteamLanguageName")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Key");

                    b.ToTable("lang_info");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguagePreferences", b =>
                {
                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Culture")
                        .HasColumnType("varchar(16) CHARACTER SET utf8mb4")
                        .HasMaxLength(16);

                    b.Property<uint>("LanguageId")
                        .HasColumnName("Language")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<bool>("UseCultureForCommandInput")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UseCultureForCmdInput")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Steam64");

                    b.HasIndex("LanguageId");

                    b.ToTable("lang_preferences");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("ReleasedSeasonId")
                        .HasColumnName("SeasonReleased")
                        .HasColumnType("int");

                    b.Property<ulong?>("WorkshopId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ReleasedSeasonId");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapWorkshopDependency", b =>
                {
                    b.Property<int>("MapId")
                        .HasColumnName("Map")
                        .HasColumnType("int");

                    b.Property<ulong>("WorkshopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("MapId", "WorkshopId");

                    b.ToTable("maps_dependencies");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.SeasonData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseTimestamp")
                        .HasColumnName("ReleaseTimestampUTC")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("seasons");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.AidRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<float>("Health")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnName("Instigator")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnName("InstigatorSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsRevive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4")
                        .HasMaxLength(48)
                        .HasDefaultValue("00000000000000000000000000000000");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<ulong>("SessionId")
                        .HasColumnName("Session")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("TimestampUTC")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_aid_records");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.DamageRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<float>("Damage")
                        .HasColumnType("float");

                    b.Property<float?>("Distance")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnName("Instigator")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnName("InstigatorSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsInjure")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuicide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeamkill")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Limb")
                        .IsRequired()
                        .HasColumnType("enum('LEFT_FOOT','LEFT_LEG','RIGHT_FOOT','RIGHT_LEG','LEFT_HAND','LEFT_ARM','RIGHT_HAND','RIGHT_ARM','LEFT_BACK','RIGHT_BACK','LEFT_FRONT','RIGHT_FRONT','SPINE','SKULL')");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("enum('Unknown','Mega_Zombie_Boulder','Vehicle_Bumper','Horde_Beacon_Self_Destruct','Trap_Wear_And_Tear','Carepackage_Timeout','Plant_Harvested','Charge_Self_Destruct','Zombie_Swipe','Grenade_Explosion','Rocket_Explosion','Food_Explosion','Vehicle_Explosion','Charge_Explosion','Trap_Explosion','Bullet_Explosion','Radioactive_Zombie_Explosion','Flamable_Zombie_Explosion','Zombie_Electric_Shock','Zombie_Stomp','Zombie_Fire_Breath','Sentry','Useable_Gun','Useable_Melee','Punch','Animal_Attack','Kill_Volume','Vehicle_Collision_Self_Damage','Lightning','VehicleDecay')");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<string>("PrimaryAssetName")
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4")
                        .HasMaxLength(48);

                    b.Property<ulong?>("RelatedPlayer")
                        .HasColumnName("RelatedPlayer")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("RelatedPlayerPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("RelatedPlayerSessionId")
                        .HasColumnName("RelatedPlayerSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<string>("SecondaryAssetName")
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4")
                        .HasMaxLength(48);

                    b.Property<ulong>("SessionId")
                        .HasColumnName("Session")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("TimestampUTC")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("RelatedPlayer");

                    b.HasIndex("RelatedPlayerSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_damage");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.DeathRecord", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("DeathCause")
                        .IsRequired()
                        .HasColumnType("enum('BLEEDING','BONES','FREEZING','BURNING','FOOD','WATER','GUN','MELEE','ZOMBIE','ANIMAL','SUICIDE','KILL','INFECTION','PUNCH','BREATH','ROADKILL','VEHICLE','GRENADE','SHRED','LANDMINE','ARENA','MISSILE','CHARGE','SPLASH','SENTRY','ACID','BOULDER','BURNER','SPIT','SPARK')");

                    b.Property<string>("DeathMessage")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<float?>("Distance")
                        .HasColumnType("float");

                    b.Property<ulong?>("Instigator")
                        .HasColumnName("Instigator")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("InstigatorPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("InstigatorPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("InstigatorSessionId")
                        .HasColumnName("InstigatorSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsSuicide")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeamkill")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("PositionX")
                        .HasColumnType("float");

                    b.Property<float>("PositionY")
                        .HasColumnType("float");

                    b.Property<float>("PositionZ")
                        .HasColumnType("float");

                    b.Property<string>("PrimaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong?>("RelatedPlayer")
                        .HasColumnName("RelatedPlayer")
                        .HasColumnType("bigint unsigned");

                    b.Property<float?>("RelatedPlayerPositionX")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionY")
                        .HasColumnType("float");

                    b.Property<float?>("RelatedPlayerPositionZ")
                        .HasColumnType("float");

                    b.Property<ulong?>("RelatedPlayerSessionId")
                        .HasColumnName("RelatedPlayerSession")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("SecondaryAsset")
                        .HasColumnType("char(32)");

                    b.Property<ulong>("SessionId")
                        .HasColumnName("Session")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.Property<byte>("Team")
                        .HasColumnType("tinyint unsigned");

                    b.Property<float>("TimeDeployedSeconds")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnName("TimestampUTC")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Instigator");

                    b.HasIndex("InstigatorSessionId");

                    b.HasIndex("RelatedPlayer");

                    b.HasIndex("RelatedPlayerSessionId");

                    b.HasIndex("SessionId");

                    b.HasIndex("Steam64");

                    b.HasIndex("Team");

                    b.ToTable("stats_deaths");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Users.WarfareUserData", b =>
                {
                    b.Property<ulong>("Steam64")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("FirstJoined")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastJoined")
                        .HasColumnType("datetime");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("PermissionLevel")
                        .IsRequired()
                        .HasColumnType("enum('Member','Helper','TrialAdmin','Admin','Superuser')");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("varchar(48) CHARACTER SET utf8mb4")
                        .HasMaxLength(48);

                    b.Property<uint>("TotalSeconds")
                        .HasColumnType("int unsigned");

                    b.HasKey("Steam64");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerHWID", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("HWID")
                        .IsRequired()
                        .HasColumnType("binary(20)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("HWID");

                    b.HasIndex("Steam64");

                    b.ToTable("hwids");
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerIPAddress", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("IPAddress")
                        .HasColumnName("Unpacked")
                        .HasColumnType("varchar(45)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginCount")
                        .HasColumnType("int");

                    b.Property<uint>("PackedIP")
                        .HasColumnName("Packed")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("Steam64")
                        .HasColumnName("Steam64")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("PackedIP");

                    b.HasIndex("Steam64");

                    b.ToTable("ip_addresses");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionAsset", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany("Assets")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Factions.FactionLocalization", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany("Translations")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.GameRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "WinnerFaction")
                        .WithMany()
                        .HasForeignKey("WinnerFactionId");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.GameData.SessionRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Uncreated.Warfare.Models.GameData.GameRecord", "Game")
                        .WithMany("Sessions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId");

                    b.HasOne("Uncreated.Warfare.Models.Seasons.MapData", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("PlayerDataSteam64")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "NextSession")
                        .WithOne("PreviousSession")
                        .HasForeignKey("Uncreated.Warfare.Models.GameData.SessionRecord", "PreviousSessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Uncreated.Warfare.Models.Seasons.SeasonData", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", null)
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Bundles.KitEliteBundle", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Bundles.EliteBundle", "Bundle")
                        .WithMany("Kits")
                        .HasForeignKey("BundleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("Bundles")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.Kit", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitAccess", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFavorite", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredFaction", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Factions.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("FactionFilter")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitFilteredMap", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("MapFilter")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitHotkey", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitItemModel", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("ItemModels")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitLayoutTransformation", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitSkillset", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("Skillsets")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitTranslation", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("Translations")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Kits.KitUnlockRequirement", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Kits.Kit", "Kit")
                        .WithMany("UnlockRequirementsModels")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageAlias", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("Aliases")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageContributor", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "ContributorData")
                        .WithMany()
                        .HasForeignKey("Contributor")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("Contributors")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguageCulture", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany("SupportedCultures")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Localization.LanguagePreferences", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Localization.LanguageInfo", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapData", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Seasons.SeasonData", "SeasonReleased")
                        .WithMany("Maps")
                        .HasForeignKey("ReleasedSeasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Seasons.MapWorkshopDependency", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Seasons.MapData", "Map")
                        .WithMany("Dependencies")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.AidRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.DamageRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "RelatedPlayerData")
                        .WithMany()
                        .HasForeignKey("RelatedPlayer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "RelatedPlayerSession")
                        .WithMany()
                        .HasForeignKey("RelatedPlayerSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Models.Stats.Records.DeathRecord", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "InstigatorData")
                        .WithMany()
                        .HasForeignKey("Instigator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "InstigatorSession")
                        .WithMany()
                        .HasForeignKey("InstigatorSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "RelatedPlayerData")
                        .WithMany()
                        .HasForeignKey("RelatedPlayer")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "RelatedPlayerSession")
                        .WithMany()
                        .HasForeignKey("RelatedPlayerSessionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Uncreated.Warfare.Models.GameData.SessionRecord", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany()
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerHWID", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany("HWIDs")
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Uncreated.Warfare.Moderation.PlayerIPAddress", b =>
                {
                    b.HasOne("Uncreated.Warfare.Models.Users.WarfareUserData", "PlayerData")
                        .WithMany("IPAddresses")
                        .HasForeignKey("Steam64")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
