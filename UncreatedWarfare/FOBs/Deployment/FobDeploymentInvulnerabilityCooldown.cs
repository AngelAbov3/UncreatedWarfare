using System;
using Uncreated.Warfare.Events;
using Uncreated.Warfare.Events.Models;
using Uncreated.Warfare.Events.Models.Players;
using Uncreated.Warfare.Players;
using Uncreated.Warfare.Players.Management;

namespace Uncreated.Warfare.FOBs.Deployment;

[PlayerComponent]
internal class FobDeploymentInvulnerabilityCooldown : IPlayerComponent, IEventListener<DamagePlayerRequested>, IDisposable
{
    public WarfarePlayer Player { get; set; }

    public DateTime CooldownEnd { get; set; }

    public void Init(IServiceProvider serviceProvider, bool isOnJoin)
    {
        EndCooldown();
        if (!isOnJoin)
            return;

        UseableGun.onBulletSpawned += UseableGunOnBulletSpawned;
        UseableGun.onProjectileSpawned += UseableGunOnProjectileSpawned;
    }

    private void UseableGunOnBulletSpawned(UseableGun gun, BulletInfo bullet)
    {
        if (gun.player != Player.UnturnedPlayer)
            return;

        EndCooldown();
    }

    private void UseableGunOnProjectileSpawned(UseableGun gun, GameObject projectile)
    {
        if (gun.player != Player.UnturnedPlayer)
            return;

        EndCooldown();
    }

    public void StartCooldown()
    {
        CooldownEnd = DateTime.UtcNow.AddSeconds(3.5d);
    }

    public void EndCooldown()
    {
        CooldownEnd = DateTime.MinValue;
    }

    [EventListener(MustRunInstantly = true)]
    void IEventListener<DamagePlayerRequested>.HandleEvent(DamagePlayerRequested e, IServiceProvider serviceProvider)
    {
        if (e.Instigator == null || e.Parameters.cause == EDeathCause.KILL)
            return;

        DateTime dateTime = DateTime.UtcNow;
        if (dateTime < CooldownEnd)
        {
            e.Cancel();
            return;
        }

        if (dateTime < e.Instigator.Component<FobDeploymentInvulnerabilityCooldown>().CooldownEnd)
        {
            e.Cancel();
        }
    }

    public void Dispose()
    {
        UseableGun.onBulletSpawned -= UseableGunOnBulletSpawned;
        UseableGun.onProjectileSpawned -= UseableGunOnProjectileSpawned;
    }
}
